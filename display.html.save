
<html>
<canvas id='canvas' width='600' height='300'>
        This will print if Canvas not supported
    </canvas>
    <style>
#canvas {
  margin: 10px;
  padding: 10px;
  background: #ffffff;
  border: thin inset #aaaaaa;
}
    </style>
  <script src="https://cdn.socket.io/socket.io-1.4.5.js"></script>
<script>
var socket = io('/');
function getData(){
  socket.emit('getwifidata'); //send a wifi data request
}
socket.on('wifidata', (data) => { //response from wifi signal info
  updateDisplay(data);
});

/*function drawCanvas(data) {
  var canvas = document.getElementById('canvas');
  context = canvas.getContext('2d');


var left = 20;
var right = 20;
var top = 20;
/*for (var i = data.length - 4; i < data.length; i++){
  left += 20;
  right += 20;
  top += 20;
  ap.push({top: top, left: left, radius: -1*data[i].SIGNAL/3, name: data[i].ESSID});
}

  ap.push({top:20, left:30, radius: -1*data[data.length-1].SIGNAL/3, name: data[data.length-1].ESSID})
  ap.push({top: 20,left: 80,radius: -1*data[data.length-2].SIGNAL/3,name: data[data.length-2].ESSID});
  ap.push({top: 250,left: 180,radius: -1*data[data.length-3].SIGNAL/3,name: data[data.length-3].ESSID});


  for(i=0;i<ap.length;i++){
  context.beginPath();
  context.arc(ap[i].top, ap[i].left, ap[i].radius, 0, 2 * Math.PI);
  context.fillText(ap[i].ESSID, ap[i].top, ap[i].left)
  context.stroke();
  //contet.endPath();

  }
  context.font = '18pt Arial';
  context.fillStyle = 'rgb(4,222,3)';
  context.fillText("access points", 10, 20);
}*/
function apIndicator (xcoord, ycoord, addr, label){ //constructor for an access point indicator object that will display on the canvas
  this.xcoord = xcoord;
  this.ycoord = ycoord;
  this.addr = addr;
  this.label = label;
}

var mathApn = new apIndicator(40,190, "EF:61:95", "Math Apn"); // last 3 entries in the MAC address
var saasDronesApn = new apIndicator(40, 60, "94:89:AB");
function updateDisplay(data){
  var canv = document.getElementById('canvas');
  var ctx = canv.getContext('2d');
  for (var i = 0; i < data.length; i++){
    switch (true){
      case data[i].MACADDR.includes(mathApn.addr):
        mathApn.signal = data[i].SIGNAL;
        mathApn.radius = mathApn.signal / 4;
	console.log(mathApn.radius);
      break;
      case data[i].MACADDR.includes(saasDronesApn.addr):
        saasDronesApn.signal = data[i].SIGNAL;
        mathApn.radius = mathApn.signal / 4;
	console.log(mathApn.radius);
      break;
    }
  }
//draw objects on the canvas
ctx.clearRect(0,0,canv.width, canv.height);
ctx.beginPath();
ctx.font = "18pt Arial";
ctx.fillText("access points", 10,20);
ctx.stroke();
ctx.beginPath();
ctx.font = "10pt Arial";
ctx.arc(mathApn.ycoord, mathApn.xcoord, mathApn.radius, 0, 2*Math.PI);
ctx.arc(saasDronesApn.ycoord, saasDronesApn.xcoord, saasDronesApn.radius, 0, 2*Math.PI);
ctx.fillText(mathApn.addr+"    "+mathApn.signal+"%", mathApn.ycoord, mathApn.xcoord);
ctx.fillText(saasDronesApn.addr+"   "+saasDronesApn.signal + "%", saasDronesApn.ycoord, saasDronesApn.xcoord);
ctx.stroke();


}
window.onload = setInterval(getData, 1000);
</script>
</html>
